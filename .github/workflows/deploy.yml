name: Build and Deploy

on:
  push:
    branches: [ "main" ]

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:           eu-north-1
  REPOSITORY:           portfolio
  ECS_SERVICE:          portfolio-service
  ECS_CLUSTER:          portfolio-cluster
  ECS_TASK_DEFINITION:  .aws/portfolio-task.json
  CONTAINER_NAME:       portfolio

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:

    - name: Get Current Time
      run: echo "TIME=$(date +'%H')" >> $GITHUB_ENV

    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::955283203374:role/GitHub-OICD-role
        role-session-name: portfolio-OICD-session
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Increase ASG capacity  
      run: >
        aws autoscaling set-desired-capacity \
          --auto-scaling-group-name portfolio-asg 
          --desired-capacity 2 
          --honor-cooldown false
      if: ${{ env.TIME }} > 6 

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
        GITHUB_AUTH_TOKEN: ${{ secrets.TOKEN }}
      run: |
        docker build . \
          -t $REGISTRY/$REPOSITORY:$IMAGE_TAG \
          -f docker/Dockerfile \
          --secret id=token,env=GITHUB_AUTH_TOKEN
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Update ECS task definition with ID of new image
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy task definition to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true

    - name: Decrease ASG capacity
      run: >
        aws autoscaling set-desired-capacity \
          --auto-scaling-group-name portfolio-asg 
          --desired-capacity 1 
          --honor-cooldown false
      if: ${{ env.TIME }} > 6
